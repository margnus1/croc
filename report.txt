1 Problem description

A crocodile with a GPS and sensors for three different water conditions. The crocodile walks around randomly among a number of water holes with known distributions of their conditions. However, the GPS is broken. The task is to find the crocodile as fast as possible in terms of number of moves. There are also two backpackers wandering around randomly, both of them having a  working GPS. If either one of them end up at the same water hole as the crocodile they will be eaten. If this happends, the position and time for the event will be known. For some reason the crocodile seems to hide from us but instantly eats the backpackers. Since a crocodile is basically a killing machine with a brain that has just enough room for some instincs, it's reasonable to assume that we are Hippos.

More formaly, the problem is a search problem. The water holes can be described as a directed graph G. The crocodile and backpackers moves randomly once each timestep, and at each timestep we get information of water conditions for the water hole the crocodile is currently at and the backpackers position and wether they are getting eaten. There are two different actions available: move and search, and we also perform two actions each timestep. The mission is completed when we perform a search while positioned at the same water hole as the crocodile.


2 Algorithms

2.1 Pseudocode for main loop

init probabilityArray
while croc not found
  get sensor info
  update probabilityArray with sensor info 
  chose two actions two perform
  update probabilityArray with action info

2.2 

2.2.1 Calculation of new probability array with Markov forward
 
An array of probabilities for the crocodile of being at each water hole is used and is updated each iteration using Markov forward of first order. It is also updated each timestep with all information we get from sensors and our own location. Pseudocode for this:

normalize oldProbability
for each node in G
  newProbability[node] = oldProbability[node]/(numberOfNeighbours(node)+1)
  for each neighbour to node
    newProbability[node] += oldProbability[neighbour]/(numberOfNeighbours(neighbour+1)

At first the probabilities was not calculated in a correct mathematical manner. The "probabilities" was more of a good/bad measure. The very first implementation just initialized the probabilityArray to 0.5 and during each time step all probabilities below 0.5 was increased by 0.1 and all probabilites above was decreased. This was later improved by only changing non-zero probabilites with non-zero neighbours. 

2.2.2 Updating the probability array with information from backpackers and actions
    
Information from backpackers and actions are very simple to use. Each step probabilityArray[locations] is set to 0, where locations are the locations for backpackers and the locations we have performed a search. If a backpacker is eaten, probabilityArray[backpackerLocation] is set to 1 and the rest of probabilityArray is set to 0. 

In the first implementation the probability array was not zeroed when a backpacker was eaten. Performing the zeroing greatly improved the algorithm.

2.2.3 Updating the probability array with information from sensors

The probability array is updated using the following algorithm

fun normalpdf(mean, std, measure)
  return 1/(sqrttau * std) * exp( -(measure - mean)²/(2*std²))

for each node in probabilityArray
  for each water condition distribution
    probabilityArray[node] *= normalpdf(distributions[node], measure)

2.2.4 Choosing actions

This is where stuff gets complicated. It seems likely that there is an optimal algorithm, but how it should look like is quite hard to see, since the state is changed randomly, or at least non-deterministicly, each time.

The very first algorithm was not really an algorithm. We simply walked around randomly until the crocodile was found, without taking any information whatsoever into consideration. This so-called algorithm had two purposes. The first purpose is to check if the whole simulation actually works. The second is to have some kind of worst case. Any AI worse than this is to be considered bad. This algorithm found the crocodile in an avarage of 120 moves.

The second algorithm chosen was very simple. It works by simply choosing the local max probability and search there. This works quite well, but it's likely that it won't do for large graphs. 

The third algorithm uses Dijkstras algorithm to find a global maximum. We always walks towards the global maximum, and we search along that way if the probability on the water hole we are standing on is high enough. This value was tweaked by trial and error, and the optimal value was surprisingly low, only 0.03. Our initial guess was 0.7. One interesting observation is that this value is very close to one divided by number of water holes.

2.3 Further optimizations

Since the probability calculations are mathematically correct, the only way to improve this algorithm is to change the way we chose actions. We only calculate the probabilities for the crocodile to be in a specific water hole, and we only go for the maximum. Maybe it would be wiser to go for maximum clusters.
